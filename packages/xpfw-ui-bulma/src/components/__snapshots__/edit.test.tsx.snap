// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DbStore Edit Test: After create and geteditorig 1`] = `
Object {
  "createState": Object {
    "formModel": Object {
      "result": Object {
        "id": 0,
        "myNum": 420,
        "myString": "myText",
      },
    },
  },
  "getState": Object {
    "simpleTestCol": Object {
      "0": Object {
        "result": Object {
          "id": 0,
          "myNum": 420,
          "myString": "myText",
        },
      },
    },
    "users": Object {
      "0": Object {
        "result": Object {
          "email": "user",
          "id": 0,
        },
      },
    },
  },
  "updateState": Object {},
}
`;

exports[`DbStore Edit Test: Before submit patch 1`] = `
Object {
  "createState": Object {
    "formModel": Object {
      "result": Object {
        "id": 0,
        "myNum": 420,
        "myString": "myText",
      },
    },
  },
  "getState": Object {
    "simpleTestCol": Object {
      "0": Object {
        "result": Object {
          "id": 0,
          "myNum": 420,
          "myString": "myText",
        },
      },
    },
    "users": Object {
      "0": Object {
        "result": Object {
          "email": "user",
          "id": 0,
        },
      },
    },
  },
  "updateState": Object {},
}
`;

exports[`DbStore Edit Test: after create 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value="myText"
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value={420}
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
</div>
`;

exports[`DbStore Edit Test: after edit getorig 1`] = `
Object {
  "formData": Object {
    "email": "user",
    "myNum": 420,
    "myString": "myText",
    "password": "",
  },
}
`;

exports[`DbStore Edit Test: after purposely set invalid err 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value="changed"
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value={240}
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: after submitted patch 1`] = `
Object {
  "createState": Object {
    "formModel": Object {
      "result": Object {
        "id": 0,
        "myNum": 420,
        "myString": "myText",
      },
    },
  },
  "getState": Object {
    "simpleTestCol": Object {
      "0": Object {
        "result": Object {
          "id": 0,
          "myNum": 240,
          "myString": "changed",
        },
      },
    },
    "users": Object {
      "0": Object {
        "result": Object {
          "email": "user",
          "id": 0,
        },
      },
    },
  },
  "updateState": Object {
    "0formModel": Object {
      "result": Object {
        "id": 0,
        "myNum": 240,
        "myString": "changed",
      },
    },
  },
}
`;

exports[`DbStore Edit Test: after successfull save 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value="changed"
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value={240}
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: before set by getorig 1`] = `
Object {
  "formData": Object {
    "email": "user",
    "myNum": null,
    "myString": null,
    "password": "",
  },
}
`;

exports[`DbStore Edit Test: hidden in update 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: hidden text 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "hide": Object {
            "create": true,
          },
        },
      }
    }
    key="myString"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: not hidden in update 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "hide": Object {
            "create": true,
            "find": false,
            "update": false,
          },
        },
      }
    }
    key="myString"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: prefix After create and geteditorig 1`] = `
Object {
  "createState": Object {
    "formModel": Object {
      "result": Object {
        "id": 1,
        "myNum": 24,
        "myString": "secondOBJ",
      },
    },
  },
  "getState": Object {
    "simpleTestCol": Object {
      "0": Object {
        "result": Object {
          "id": 0,
          "myNum": 240,
          "myString": "changed",
        },
      },
      "1": Object {
        "result": Object {
          "id": 1,
          "myNum": 24,
          "myString": "secondOBJ",
        },
      },
    },
    "users": Object {
      "0": Object {
        "result": Object {
          "email": "user",
          "id": 0,
        },
      },
    },
  },
  "updateState": Object {
    "0formModel": Object {
      "result": Object {
        "id": 0,
        "myNum": 240,
        "myString": "changed",
      },
    },
    "formModel": undefined,
  },
}
`;

exports[`DbStore Edit Test: prefix Before submit patch 1`] = `
Object {
  "createState": Object {
    "formModel": Object {
      "result": Object {
        "id": 1,
        "myNum": 24,
        "myString": "secondOBJ",
      },
    },
  },
  "getState": Object {
    "simpleTestCol": Object {
      "0": Object {
        "result": Object {
          "id": 0,
          "myNum": 240,
          "myString": "changed",
        },
      },
      "1": Object {
        "result": Object {
          "id": 1,
          "myNum": 24,
          "myString": "secondOBJ",
        },
      },
    },
    "users": Object {
      "0": Object {
        "result": Object {
          "email": "user",
          "id": 0,
        },
      },
    },
  },
  "updateState": Object {
    "0formModel": Object {
      "result": Object {
        "id": 0,
        "myNum": 240,
        "myString": "changed",
      },
    },
    "formModel": undefined,
  },
}
`;

exports[`DbStore Edit Test: prefix after create 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
</div>
`;

exports[`DbStore Edit Test: prefix after edit getorig 1`] = `
Object {
  "formData": Object {
    "email": "user",
    "myNum": 24,
    "myString": "secondOBJ",
    "password": "",
  },
}
`;

exports[`DbStore Edit Test: prefix after purposely set invalid err 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value="SECOND change"
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value={6543}
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: prefix after submitted patch 1`] = `
Object {
  "createState": Object {
    "formModel": Object {
      "result": Object {
        "id": 1,
        "myNum": 24,
        "myString": "secondOBJ",
      },
    },
  },
  "getState": Object {
    "simpleTestCol": Object {
      "0": Object {
        "result": Object {
          "id": 0,
          "myNum": 240,
          "myString": "changed",
        },
      },
      "1": Object {
        "result": Object {
          "id": 1,
          "myNum": 6543,
          "myString": "SECOND change",
        },
      },
    },
    "users": Object {
      "0": Object {
        "result": Object {
          "email": "user",
          "id": 0,
        },
      },
    },
  },
  "updateState": Object {
    "0formModel": Object {
      "result": Object {
        "id": 0,
        "myNum": 240,
        "myString": "changed",
      },
    },
    "editPrefix.1formModel": Object {
      "result": Object {
        "id": 1,
        "myNum": 6543,
        "myString": "SECOND change",
      },
    },
    "formModel": undefined,
  },
}
`;

exports[`DbStore Edit Test: prefix after successfull save 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value="SECOND change"
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value={6543}
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: prefix before set by getorig 1`] = `
Object {
  "formData": Object {
    "email": "user",
    "myNum": null,
    "myString": null,
    "password": "",
  },
}
`;

exports[`DbStore Edit Test: prefix result of edit fetch 1`] = `
Object {
  "result": Object {
    "id": 1,
    "myNum": 24,
    "myString": "secondOBJ",
  },
}
`;

exports[`DbStore Edit Test: prefix updated record 1`] = `
Object {
  "result": Object {
    "id": 1,
    "myNum": 6543,
    "myString": "SECOND change",
  },
}
`;

exports[`DbStore Edit Test: prefix while loading 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value="SECOND change"
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    prefix="editPrefix"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value={6543}
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: resetOnMount 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;

exports[`DbStore Edit Test: result of edit fetch 1`] = `
Object {
  "result": Object {
    "id": 0,
    "myNum": 420,
    "myString": "myText",
  },
}
`;

exports[`DbStore Edit Test: updated record 1`] = `
Object {
  "result": Object {
    "id": 0,
    "myNum": 240,
    "myString": "changed",
  },
}
`;

exports[`DbStore Edit Test: while loading 1`] = `
<div>
  <UNDEFINED
    field={
      Object {
        "mapTo": "myString",
        "type": 2,
        "validate": Object {
          "required": Object {
            "type": 2,
          },
        },
      }
    }
    key="myString"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value="changed"
  />
  <UNDEFINED
    field={
      Object {
        "mapTo": "myNum",
        "type": 3,
        "validate": Object {},
      }
    }
    key="myNum"
    setValue={[Function]}
    user={
      Object {
        "email": "user",
        "id": 0,
      }
    }
    value={240}
  />
  <button
    onClick={[Function]}
  >
    Save Changes
  </button>
  <div
    class="notification is-success"
  >
    Successfully saved changes to 
  </div>
</div>
`;
